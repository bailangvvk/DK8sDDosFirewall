user root;
daemon off;
# 绑定cpu亲核性，减少cache未命中，请根据实际情况修改
worker_processes 1;
worker_cpu_affinity 1;
# 日志输出到标准输出
error_log /dev/stdout;
events {
    # 设置单个worker连接数
    worker_connections 10240;
    use epoll;
}

http {
    # 配置名为access的log输出格式
    log_format access '$remote_addr $server_port - $http_host [$time_local] '
                      '"$request" $status $body_bytes_sent '
                      '"$http_referer" "$http_user_agent" '
                      '$http_x_forwarded_for|$http_x_real_ip|$limit_key';
    # log日志输出到标准输出
    access_log /dev/stdout access;
    # 关闭日志，提高性能。开启日志，排查问题
    # access_log off;

    # 白名单不限速
    geo $limit {
        default 1;
        192.168.0.0/24 0;
        10.0.0.0/8 0;
        127.0.0.0/8 0;
    }

    # Header有X-Forwarded-IP就用xff，没有就用数据包的源IP
    map $http_x_forwarded_for $real_ip {
        default         $remote_addr;
        "~^(?P<ip>[^,]+)" $ip;
    }

    # 匹配到白名单就为空不限速，没匹配到就限速
    map $limit $limit_key {
        0 "";
        1 $real_ip;
    }

    # 请求超过阈值，断开连接
    limit_req_status 444;
    # 限制单个ip的请求数，避免单个ip打爆服务，请根据实际业务进行修改
    limit_req_zone $limit_key   zone=req_ip:10m   rate=5r/s;
    # 限制单个服务的请求数，避免请求过载打爆服务，请根据实际业务进行修改
    limit_req_zone $server_name zone=req_svr:1m   rate=1000r/s;
    # 限制单个uri的请求数，避免带宽被打爆，请根据实际业务进行修改
    limit_req_zone $uri         zone=req_res:10m  rate=3r/s;
    # 连接数超过阈值，断开连接
    limit_conn_status 444;
    # 限制单个ip的连接数
    limit_conn_zone $limit_key zone=con_ip:10m;
    # 限速的共享内存，如果不够可以改大
    lua_shared_dict traffic_stats 50m;
    # 引入lua模块
    lua_package_path "/app/?.ljbc;/app/?.lua;;";
    server {
        # 设置dns解析
        resolver 8.8.8.8 ipv6=off;
        # 监听80和443端口
        listen 80;
        listen 443 ssl;
        # 关闭文件索引，避免文件结构泄漏
        autoindex off;
        # 设置静态文件的目录
        root /app/public/;
        # 开启OCSP装订，加速TLS握手效率
        ssl_stapling on;
        ssl_stapling_verify on;
        # 配置ssl证书和密钥
        ssl_certificate /app/cert.pem;
        ssl_certificate_key /app/cert.key;
        # SSL会话有效期
        ssl_session_timeout 5m;
        # 使用SSL版本，加密算法
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;
        ssl_prefer_server_ciphers on;
        # 开启HSTS，强制用户浏览器使用https协议
        add_header Strict-Transport-Security "max-age=2592000";

        # 开启gzip压缩，配置压缩文件类型，压缩等级，最小压缩长度，关闭IE浏览器压缩
        gzip on;
        gzip_types *;
        gzip_comp_level 6;
        gzip_min_length 256;
        gzip_buffers 16 8k;
        gzip_proxied any;
        gzip_vary on;
        gzip_disable "MSIE [1-6]\.(?!.*SV1)";

        # 配置匹配的域名 (重要，必须修改)
        server_name www.dk8s.com;

        # 限制下行带宽
        limit_rate 100k;
        limit_rate_after 1m;

        # 限制连接数
        limit_conn con_ip 40;

        # 检查客户浏览器端是否断开连接
        lua_check_client_abort on;

        # 引入限速配置文件
        include /app/env.conf;

        location / {
            # 对单个ip进行限速，请根据实际业务进行修改
            limit_req zone=req_ip burst=100 delay=200;
            # 对整个服务进行限速，请根据实际业务进行修改
            limit_req zone=req_svr burst=1000 delay=2000;
            # 向后端传递host名
            proxy_set_header Host $host;
            # 对请求IP进行限速处理
            access_by_lua_file /app/protect.ljbc;
            # 对请求IP流量进行统计
            log_by_lua_file /app/record.ljbc;
            # 调试使用
            # lua_code_cache off;
            # access_by_lua_file /app/protect.lua;
            # log_by_lua_file /app/record.lua;
            # 后段服务ip
            proxy_pass http://127.0.0.1:3000;
        }

        location /dk8s.stats {
            # 对单个ip进行限速
            limit_req zone=req_ip burst=100 delay=200;
            # 对整个服务进行限速
            limit_req zone=req_svr burst=1000 delay=2000;
            # lua_code_cache off;
            # access_by_lua_file /app/protect.lua;
            # log_by_lua_file /app/record.lua;
            access_by_lua_file /app/protect.ljbc;
            content_by_lua_file /app/stats.ljbc;
            log_by_lua_file /app/record.ljbc;
        }

        location ~* \.(jpg|png|jpeg)$ {
            # 对单个ip进行限速
            limit_req zone=req_ip burst=100 delay=200;
            # 对整个服务进行限速
            limit_req zone=req_svr burst=1000 delay=2000;
            # 对uri进行限速，防止刷单个资源，导致带宽被打爆
            limit_req zone=req_res burst=200 delay=1000;
            # lua_code_cache off;
            # access_by_lua_file /app/protect.lua;
            # log_by_lua_file /app/record.lua;
            # 设置浏览器资源过期时间
            expires 7d;
            proxy_set_header Host $host;
            access_by_lua_file /app/protect.ljbc;
            log_by_lua_file /app/record.ljbc;
            # 后段服务ip
            proxy_pass http://127.0.0.1:3000;
        }

        location ~* \.(js|css|svg|woff|woff2)$ {
            # 对单个ip进行限速
            limit_req zone=req_ip burst=100 delay=200;
            # 对整个服务进行限速
            limit_req zone=req_svr burst=1000 delay=2000;
            # 对uri进行限速，防止刷单个资源，导致带宽被打爆
            limit_req zone=req_res burst=200 delay=1000;
            # lua_code_cache off;
            # access_by_lua_file /app/protect.lua;
            # log_by_lua_file /app/record.lua;
            # 设置浏览器资源过期时间
            expires 1d;
            # 向后端传递host名
            proxy_set_header Host $host;
            # 让浏览器每次请求检查资源是否过期
            add_header Cache-Control no-cache;
            access_by_lua_file /app/protect.ljbc;
            log_by_lua_file /app/record.ljbc;
            # 后段服务ip
            proxy_pass http://127.0.0.1:3000;
        }

        error_page 429 @429;
        location @429 {
            return 429 "error";
        }

        # location /control_group {
        #     # 测速的对照组，生产环境请删除
        #     proxy_set_header Host $host;
        #     proxy_pass http://127.0.0.1:3000;
        #     access_by_lua_block {
        #         ngx.exit(429)
        #     }
        #     log_by_lua_block {
        #         local a=0;
        #     }
        }
    }

    server {
        # 未匹配的域名，断开连接，防止源站被扫描
        listen 80 default_server;
        listen 443 ssl default_server;
        ssl_reject_handshake on;
        return 444;
    }

    # server {
    #     # 测速的对照组，生产环境请删除
    #     listen 3000;
    #     location / {
    #         return 200 'Ok';
    #     }
    # }
}
